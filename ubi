#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author: Edilson Alzemand

import sys
import os
import pynotify
import re
import socket
import uuid
from random import choice

pynotify.init("ubi")
comand = sys.argv[1:]
enter = ' '.join(comand)
enter = enter.lower()
enter = enter.replace('?', '')
enter = enter.replace('!', '')

def fun (x):
    if x == 'hi' or x == 'hello' or x == 'hey':
        os.system("finger `whoami` | sed 's/.*: *//;q' > /tmp/ubi_tmp.txt")
        a = open ("/tmp/ubi_tmp.txt", "r")
        b = a.read()
        c = ["Hi, " , "Hello, ", "What's up! "]
        c1 = choice(c)
        d = c1 + b
        a.close()
        print ("ubi: " + d)
        notify = pynotify.Notification( d , "", "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()
    elif x == 'i love you' or  x == 'love you' or x == 'love u':
        notify = pynotify.Notification( d , "", "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()
    elif x == 'thank you' or x == 'thanks':
        print ("ubi: You are welcome!\n")
        notify = pynotify.Notification("You are welcome!", ":)", "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()
    elif x == 'good morning':
        os.system("date > /tmp/ubi_tmp.txt")
        a = open ("/tmp/ubi_tmp.txt", "r")
        date = a.read()
        print "ubi: Good morning\n"
        notify = pynotify.Notification("Good morning", date, "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()
    elif x == 'tell me about yourself':
        print "ubi: In short, I am your personal assistant. I try to make things easier to do on your computer\n"
        notify = pynotify.Notification("In short, I am your personal assistant. I try to make things easier to do on your computer", '', "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()
    elif x == '':
        print ("ubi: Hi I am ubi. How can I help you?\n")
        notify = pynotify.Notification("I am ubi. How can I help you?", "type a command", "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()
    else:
        return False

def username ():
        os.system("whoami > /tmp/ubi_tmp.txt")
        a = open ("/tmp/ubi_tmp.txt", "r")
        b = a.read()
        c = 'Your username is '
        d = c + b
        a.close()
        print ("ubi: " + d)
        notify = pynotify.Notification( d , "" , "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()

def name():
        os.system("finger `whoami` | sed 's/.*: *//;q' > /tmp/ubi_tmp.txt")
        a = open ("/tmp/ubi_tmp.txt", "r")
        b = a.read()
        c = 'Your name is '
        d = c + b
        a.close()
        print ("ubi: " + d)
        notify = pynotify.Notification( d , "" , "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()

def ip ():
    try:
        print ("connecting...\n")
        os.system('curl -sL http://pannous.net/ip.php > /tmp/ubi_tmp.txt')
        a = open ("/tmp/ubi_tmp.txt", "r")
        b = a.read()
        c = ' '
        d = c + b
        a.close()
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("ubuntu.com",80))
        e = (s.getsockname()[0])
        s.close()
        print ("ubi: local " + e)
        print ("ubi: external" + d)
        notify = pynotify.Notification('local: ' + e , 'external: ' + d , "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()
    except:
        print "Hoo! You are not connected to the Internet"
        notify = pynotify.Notification("Hoo! You are not connected to the Internet" , "", "/usr/share/ubi/lib/img/ubi.svg")
        notify.show()

def speedtest ():
    print ("ubi: Ok, connecting...\n")
    os.system("/usr/share/ubi/lib/speedtest --simple > /tmp/ubi_tmp.txt")
    a = open("/tmp/ubi_tmp.txt", "r")
    ping = a.readline()
    download = a.readline()
    upload = a.readline()
    notify = pynotify.Notification( download + upload , ping , "/usr/share/ubi/lib/img/ubi.svg")
    print (download + upload + ping)
    notify.show()

def search (x):
    notify = pynotify.Notification("okay, I look " + x + " for you" , "", "/usr/share/ubi/lib/img/ubi.svg")
    notify.show()
    os.system("/usr/share/ubi/lib/ubi-search-module " + x)

def mac ():
    mac = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1])
    mac = mac.upper()
    print "ubi: Your MAC Adress is: " + mac
    print ''
    notify = pynotify.Notification( "Your MAC Adress is: " + mac, "", "/usr/share/ubi/lib/img/ubi.svg")
    notify.show()

def undelete():
    print ("ubi: Ok, lets restore you files\n")
    print ("ubi: I need to be called into the directory")
    os.system("sleep 3")
    os.system("sudo fdisk -l")
    dev = raw_input("ubi: Enter the name of the partition where your Linux this: exemple: /dev/sda1: ")
    os.system("pwd > /tmp/ubi_tmp.txt")
    a = open ("/tmp/ubi_tmp.txt", "r")
    b = a.readline()
    b = b.replace('\n', '')
    b1 = raw_input("ubi: Enter the file name and extension: ")
    # c = b + '/*.*'
    b1 = '/' + b1
    # c = o caminho inteiro do arquivo apagado
    c = b + b1
    os.system("sudo extundelete --restore-file " + c + " " + dev)
    # os.system("sudo extundelete /dev/sda1 --restore-directory " + b)
    # sudo extundelete /dev/sda1 --restore-all

def kernel ():
    os.system("uname -r > /tmp/ubi_tmp.txt")
    a = open ("/tmp/ubi_tmp.txt", "r")
    b = a.read()
    c = "ubi: Your kernel is: "
    d = c + b
    print (c + b)
    notify = pynotify.Notification("Your Kernel is: " + b , "", "/usr/share/ubi/lib/img/ubi.svg")
    notify.show()

def sorry ():
    print ("ubi: I'm sorry I didn't understand your question\n" )
    notify = pynotify.Notification( "I'm sorry I didn't understand your question" , "", "/usr/share/ubi/lib/img/ubi.svg")
    notify.show()

a1 = enter.find('my username')
a2 = enter.find('my name')
a3 = enter.find('my ip')
a4 = enter.find('speedtest')
a44 = enter.find ('speed test')
a5 = enter.split()
a6 = enter.find('my mac')
a7 = enter.find('my mac adress')
a8 = enter.find('restore file')
a9 = enter.find('my kernel')

if enter[a1:] == 'my username':
    username()
elif enter[a2:] == 'my name':
    name()
elif enter[a3:] == 'my ip':
    ip()
elif enter[a4:] == 'speedtest' or enter[a44:] == 'speed test':
    speedtest()
elif a5 == []:
    fun(enter)
elif a5[0] == 'who' and a5[1] == 'is':
    a5.remove('who')
    a5.remove('is')
    s = ' '.join(a5)
    search(s)
elif a5[0] == 'search' and a5[1] == 'for':
    a5.remove('search')
    a5.remove('for')
    s = ' '.join(a5)
    search(s)
elif enter[a6:] == "my mac" or enter[a7:] == "my mac adress":
    mac()
elif enter[a8:] == "restore file":
    undelete()
elif enter[a9:] == "my kernel":
    kernel()
elif fun(enter) == False:
    sorry()
