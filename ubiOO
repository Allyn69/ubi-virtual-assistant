#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# ubi virtual assistant
#
# Copyleft (C) 2016 Edilson Alzemand
# edilson.alzemand@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import os.path
import notify2
import re
import socket
import subprocess
import uuid
from datetime import datetime
from random import choice
import sqlite3


comand = sys.argv[1:]
enter = ' '.join(comand)
enter = enter.lower()
enter = enter.replace('?', '')
enter = enter.replace('!', '')

# Criação de banco de dados
try:
    conn = sqlite3.connect((os.path.expanduser('~//.ubi/brain.db')))
except:
    directory = os.path.expanduser('~/.ubi')
    os.mkdir(directory)
    conn = sqlite3.connect((os.path.expanduser('~//.ubi/brain.db')))

# Definir cursor
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS answer (
    "idanswer" INTEGER NOT NULL,
    "answercol" TEXT,
    "terminal" BLOB
    );
    """)

cursor.execute("""
    CREATE TABLE IF NOT EXISTS "question" (
    "idquestion" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "idanswer" INTEGER REFERENCES answer (idanswer),
    "questioncol" TEXT);
    """)


conn.close()

# Classe para tratamento de notificações

class Notification(object):
    # Classe para emitir notificações
    icon = "/usr/share/ubi/lib/img/ubi.svg"
    def __init__(self, title, subtitle = ""):
        self.title = title
        self.subtitle = subtitle

    def display(self):
        notify2.init("ubi")
        notify = notify2.Notification(self.title , self.subtitle, self.icon)
        return notify.show()


class QuestionAsAnswer(object):
    def __init__(self, question, answer):
        self.question = question
        self.answer = answer

    def insertQuestion(self):
        conn = sqlite3.connect((os.path.expanduser('~//.ubi/brain.db')))
        cursor = conn.cursor()
        cursor.execute("""INSERT INTO question""")
